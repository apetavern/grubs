@using Grubs.Helpers

@namespace Grubs.UI

@inherits Panel

@attribute [StyleSheet]

<root>
    <div class="canvas" @ref=Canvas>
        @foreach (var entry in _entries)
        {
            <ChatboxEntry ChatMessage=@entry />
        }
    </div>
    <TextEntry @ref=Input onsubmit=@Submit onblur=@Close />
</root>

@code {
    private const int MaxItems = 100;
    private const float MessageLifetime = 10f;

    private Panel Canvas { get; set; }
    private TextEntry Input { get; set; }

    private Queue<ChatHelper.ChatMessage> _entries = new Queue<ChatHelper.ChatMessage>();

    protected override void OnAfterTreeRender(bool firstTime)
    {
        base.OnAfterTreeRender(firstTime);
        if(firstTime)
            ChatHelper.Instance.OnMessageReceived += OnMessageReceived;

        Canvas.PreferScrollToBottom = true;
        Input.AcceptsFocus = true;
        Input.AllowEmojiReplace = true;
    }

    public override void Tick()
    {
        if (Sandbox.Input.Pressed("chat") && IsVisibleSelf)
            Open();
    }

    private void OnMessageReceived(ChatHelper.ChatMessage message)
    {
        _entries.Enqueue(message);
        if (_entries.Count > MaxItems)
            _entries.Dequeue();

        Canvas?.TryScrollToBottom();
    }

    private void Submit()
    {
        var message = Input.Text.Trim();
        Input.Text = string.Empty;

        Close();

        if (string.IsNullOrWhiteSpace(message))
            return;

        ChatHelper.Instance.SendMessage(message);
    }

    private void Open()
    {
        AddClass("open");
        Input.Focus();
        Canvas.TryScrollToBottom();
    }

    private void Close()
    {
        RemoveClass("open");
        Input.Blur();
        Input.Text = string.Empty;
        Input.Label.SetCaretPosition(0);
    }

    protected override int BuildHash()
    {
        return HashCode.Combine(_entries.Count);
    }
}