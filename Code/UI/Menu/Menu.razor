@namespace Grubs.UI.Menu

@using Grubs.UI.Components
@using Sandbox;
@using Sandbox.Razor
@using Sandbox.UI;

@inherits PanelComponent

<root>
    <Cursor />

    <div class="column left">
        <div class="grubs-logo">
            GRUBS
        </div>
        <div class="menu-options">
            <button onclick=@(() => OnOptionSelected("Create Lobby"))>Create Lobby</button>
            <button onclick=@(() => OnOptionSelected("Join Lobby"))>Join Lobby</button>
            <button class="disabled" onclick=@(() => OnOptionSelected("Customize"))>Customize</button>
            <button onclick=@(() => OnOptionSelected("Settings"))>Settings</button>
            <button onclick=@(() => OnOptionSelected("Quit"))>Quit</button>
        </div>
    </div>
    <div class="column right">
        <div class="discord-info">
            <div class="branding">
                <div class="logo-container">
                    <img src="textures/ui/discord-mark-white.png" />
                </div>
                <div class="server-link">discord.gg/apetavern</div>
            </div>
            <div class="feedback-text">
                Leave feedback and bug reports on our Discord!
            </div>
        </div>
    </div>

    @if (Current is not null)
    {
        <div @ref="Current" />
    }
</root>

@code
{
    public static Menu Instance { get; set; }

    public Panel Current { get; set; }

    public Menu()
    {
        Instance = this;
    }

    private void OnOptionSelected(string option)
    {
        switch (option)
        {
            case "Create Lobby":
                Transition<CreateLobby>();
                break;
            case "Join Lobby":
                Transition<JoinLobby>();
                break;
            case "Customize":
                Log.Warning("Customize coming soon!");
                break;
            case "Settings":
                Transition<Settings>();
                break;
            case "Quit":
                Game.Close();
                break;
        }
    }

    private async void Transition<T>() where T : Panel, new()
    {
        Current.Delete();
        Current = Panel.AddChild<T>("hide");
        SetClass("hide", true);
    }

    public void Return()
    {
        SetClass("hide", false);
    }

    protected override void OnTreeBuilt()
    {
        base.OnTreeBuilt();

        Cursor.Enabled("menu", true);
    }

    protected override void OnTreeFirstBuilt()
    {
        Current = Panel.AddChild<TitleScreen>();
        SetClass("hide", true);
    }

    protected override int BuildHash()
    {
        return HashCode.Combine(Cursor.IsEnabled());
    }
}