@namespace Grubs.UI.GameLanding

@using Grubs.Systems.Pawn
@using Sandbox.Services

@inherits Panel

@if (!Player.IsValid() || Connection is null)
{
    Log.Info( $"{Connection} (Connection) is null?" );
    return;
}

<root>
    <div class="avatar bg-@Color-med" style="transform: rotate(@(AvatarRotationDegrees)deg)">
        <img src="avatar:@Connection.SteamId"/>
    </div>
    <div class="info bg-@Color-med text-@Color-light">
        <div class="name">
            <label class="name-text">@Connection.DisplayName</label>
        </div>
        @* <div class="stats"> *@
        @*     @foreach (var stat in GetStats(2)) *@
        @*     { *@
        @*         <label>@stat.Title: @stat.Value</label> *@
        @*     } *@
        @* </div> *@
    </div>
</root>

@code
{
    public Player Player { get; set; }
    private Connection Connection => Player.Network.Owner;
    private string Color => Player?.PlayerColor.ToString();

    private int _statIndex = 0;
    private TimeSince _timeSinceStatsChanged;
    
    private int AvatarRotationDegrees { get; set; }

    private readonly HashSet<string> StatIds = new()
    {
        "grubs-killed",
        "own-grubs-killed",
        "ffa-games-played",
        "ffa-games-won",
    };

    private IEnumerable<Stats.PlayerStat> GetStats(int count)
    {
        var stats = Stats.GetPlayerStats("apetavern.grubs", (long)Connection.SteamId);
        for (var i = _statIndex; i < _statIndex + count; i++)
        {
            yield return stats.Get(StatIds.ElementAt(i % StatIds.Count));
        }
    }

    protected override void OnAfterTreeRender(bool firstTime)
    {
        base.OnAfterTreeRender(firstTime);

        if (firstTime)
        {
            AvatarRotationDegrees = Game.Random.Int(-2, 2);
        }
    }

    public override void Tick()
    {
        if (_timeSinceStatsChanged > 15f)
        {
            _statIndex += 2;
            _timeSinceStatsChanged = 0f;
        }
    }

    protected override int BuildHash()
    {
        return HashCode.Combine(Player, Player?.PlayerColor, Connection?.Id, _statIndex);
    }
}