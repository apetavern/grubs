@namespace Grubs.UI.GameLanding

@using Grubs.Systems.GameMode
@using Grubs.Systems.Pawn
@using Grubs.UI.Components
@inherits PanelComponent

@if (!BaseGameMode.Current.IsValid())
{
    return;
}

<root>
    <Cursor />
    <SceneBackground @ref="SceneBackground" />
    <GameRules @ref=GameRulesPanel EnableCloseButton=@true class="hide" />
    <Chatbox />
    <div @ref="MenuBody" class="body">
        <div class="game-info">
            <label class="lobby">Lobby</label>
            <label class="gamemode-name">@BaseGameMode.Current.Name</label>
        </div>
        <div class="player-cards">
            @foreach (var player in Player.All)
            {
                <PlayerCard Player=@player />
            }
        </div>
        <div class="terrain-preview">
            <label>Terrain Preview</label>
            <TerrainPreview/>
        </div>
        <div class="controls">
            @if (IsHost() && Player.All.Count() == 1)
            {
                <button class="playground-button" onclick=@StartSandbox><i>gamepad</i>SANDBOX</button>
            }
            @if (IsHost() && CanStart())
            {
                <button class="start-button" onclick=@Start><i>play_arrow</i>START!</button>
            }
        </div>
        @if (IsHost())
        {
            <button class="rules-button" onclick=@OpenGameRules>
                <i>rule</i>
                Edit Game Rules
            </button>
        }
    </div>
</root>

@code
{
    public static GameLanding Instance { get; set; }

    public SceneBackground SceneBackground { get; set; }
    public Panel MenuBody { get; set; }

    private Panel GameRulesPanel { get; set; }

    public bool IsHost()
    {
        return Connection.Local == Connection.Host;
    }

    public bool CanStart()
    {
        return Connection.All.Count > 1 || Game.IsEditor;
    }

    public GameLanding()
    {
        Instance = this;
        Cursor.Enabled("menu", true);
    }

    private void OpenGameRules()
    {
        if (!IsHost())
            return;

        GameRulesPanel.SetClass("hide", false);
    }

    private void Start()
    {
        if (IsHost() && CanStart())
            BaseGameMode.Current.Start();
    }

    private void StartSandbox()
    {
        if (IsHost() && Player.All.Count() == 1)
        {
            GrubsConfig.KeepGameAlive = true;
            GrubsConfig.InfiniteAmmo = true;
            BaseGameMode.Current.IsSandboxMode = true;
            BaseGameMode.Current.Start();
        }
    }

    protected override void OnUpdate()
    {
        base.OnUpdate();

        var hide = BaseGameMode.Current?.GameStarted ?? false;
        Cursor.Enabled("menu", !hide);
        SceneBackground?.SetClass("hide", hide);
        MenuBody?.SetClass("hide", hide);
        SetClass("hide", hide);
    }

    protected override int BuildHash()
    {
        return HashCode.Combine(Connection.All?.Count, Player.All.Count());
    }
}