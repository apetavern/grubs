@namespace Grubs.UI.GameLanding

@using Grubs.Systems.GameMode
@using Grubs.Terrain

@inherits Panel

<style>
    TerrainPreview {
        width: 100%;
        height: 100%;

		> image {
			width: 100%;
		}
    }
</style>

<root>
    @if (Networking.IsHost && GrubsConfig.WorldTerrainType is GrubsConfig.TerrainType.Generated)
    {
        <i onclick=@RefreshTerrain>refresh</i>
    }
	@if ( !BaseGameMode.Current?.GameStarted ?? false )
	{
		<Image Texture=@Texture />
	}
</root>

@code
{
	public CameraComponent RenderCamera { get; set; }

	private Texture Texture;

	public override void Tick()
	{
		if ( !Game.ActiveScene.IsValid() || !RenderCamera.IsValid() )
		{
			return;	
		}

		var textureSize = Box.Rect.Size == 0 ? new Vector2(500, 300) : Box.Rect.Size;
		RenderCamera.RenderTarget = Texture.CreateRenderTarget( "terrain-preview", ImageFormat.RGBA8888, textureSize );

		Texture = RenderCamera.RenderTarget;

        var center = new Vector3(0f, 512f, (GrubsTerrain.Instance?.WorldTextureHeight ?? 1024f) / 2f);
        var w = GrubsTerrain.Instance?.WorldTextureLength ?? 2048f;
        var h = GrubsTerrain.Instance?.WorldTextureHeight ?? 1024f;

        var distX = w / (2 * MathF.Tan(RenderCamera.FieldOfView / 2f * 0.017f));

        // I think this is wrong but it works for most scenarios.
        var distY = h * 2 / (2 * MathF.Tan(RenderCamera.FieldOfView / 2f * 0.017f));

        var distance = Math.Max(distX, distY);

        RenderCamera.WorldRotation = Rotation.FromYaw(90f);
        RenderCamera.WorldPosition = (GrubsTerrain.Instance?.WorldPosition ?? new Vector3(0, 512f, 0)) + Vector3.Up * h / 2f - RenderCamera.WorldRotation.Forward * distance;
        RenderCamera.ZNear = 100f;
        RenderCamera.ZFar = 100000f;
    }

    private void RefreshTerrain()
    {
        GrubsTerrain.Instance?.Init();
    }

    protected override int BuildHash()
    {
        return HashCode.Combine(Time.Now);
    }
}