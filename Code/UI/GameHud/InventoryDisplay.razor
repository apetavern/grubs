@namespace Grubs.UI.GameHud

@using Grubs.Equipment
@using Grubs.Equipment.Weapons
@using Grubs.Systems.Pawn
@using Grubs.UI.Components
@using Sandbox.Diagnostics

@inherits Panel

@if (Inventory is null)
{
    return;
}

<root>
    <div class="title">INVENTORY</div>
    <div class="body">
        @for (var i = 0; i < Inventory.Equipment.Count; i += 5)
        {
            <div class="inventory-row">
                @foreach (var equipment in Inventory.Equipment.Skip(i).Take(5))
                {
                    <div 
                        class="inventory-square @(equipment.Ammo == 0 ? "disabled" : "")"
                        onclick=@(() => OnInventoryItemClicked(equipment))
                        onmouseover=@(() => HoveredEquipment = equipment)
                    >
                        <div class="equipment-ammo">@GetAmmoDisplay(equipment)</div>
                        <img src=@equipment.Icon class="equipment-preview"/>
                    </div>
                }
            </div>
        }
    </div>
    @if (HoveredEquipment is not null)
    {
        <div class="weapon-tooltip">
            <div class="weapon-header">
                <img src=@HoveredEquipment.Icon />
                <label>@HoveredEquipment.Name.ToUpper()</label>
            </div>
            <div class="weapon-info">
                @HoveredEquipment.Data.Description
            </div>
        </div>
    }
</root>

@code
{
    private static readonly Logger Log = new("InventoryDisplay");
    
    private Inventory Inventory => Inventory.Local;
    
    private Equipment HoveredEquipment { get; set; }

    public string GetAmmoDisplay(Equipment equipment) => equipment?.Ammo == -1 ? "\u221e" : equipment?.Ammo.ToString();

    public override void Tick()
    {
        var showInventory = Inventory?.InventoryOpen ?? false;
        Cursor.Enabled( "inventory", showInventory );
        SetClass( "show", showInventory );
    }

    private void OnInventoryItemClicked(Equipment equipment)
    {
        if (equipment.Ammo == 0)
            return;
        
        Log.Info( $"Attempting to equip {equipment.Name}." );
        Inventory?.EquipItem( equipment );
    }

    protected override int BuildHash()
    {
        return HashCode.Combine(Inventory, Inventory?.GetHashCode());
    }
}
