@namespace Grubs.UI

@using Grubs.Systems.Pawn
@using Grubs.UI.Components

@inherits Panel

<root>
    <div class="avatar-container bg-@Color-med" style="transform: rotate(@(Game.Random.Int(-2, 2))deg);)">
        <img class="avatar" src="avatar:@Player.Network.Owner.SteamId" />
        <div class="health-percentage text-stroke-@Color-med text-@Color-light">@Player.GetHealthPercentage%</div>
    </div>
    <div class="name-bar bg-@Color-dark">
        <div class="percentage-bar bg-@Color-med" style="width: @Player.GetHealthPercentage%" />
        <label class="text-@Color-light">@Player.Network.Owner.DisplayName</label>
    </div>
    @* <i class="icon" style="color: green; opacity: @(IsTalking() ? 1 : 0); transform: scale(@AmplitudeToScale())">record_voice_over</i> *@
    @* <i class="icon" style="color: red; opacity: @(IsMuted() ? 1 : 0)">voice_over_off</i> *@
</root>

@code {
    public Player Player { get; set; }
    private string Color => Player.PlayerColor.ToString();

    // private PlayerVoice _voice => Player.Voice;
    // private string _selectedColor => Player.SelectedColor != String.Empty ? Player.SelectedColor : Color.White.Hex;

    // private bool IsMuted() => _voice.Volume == 0;
    // private bool IsTalking() => !IsMuted() && _voice.LastPlayed < 0.25f;

    protected override void OnClick(MousePanelEvent e)
    {
        base.OnClick(e);

        if (!Cursor.IsEnabled())
            return;

        if (!Player.IsProxy)
            return;

        // var localVoice = Scene.GetAllComponents<PlayerrVoice>().FirstOrDefault(p => !p.IsProxy);
        // localVoice.ToggleBlock(Player);
    }

    // private string AmplitudeToScale() => (1f + (_voice.Amplitude * 1.5f)).ToString("0.#");

    protected override int BuildHash()
    {
        return HashCode.Combine( Player.GetHealthPercentage );
        // return HashCode.Combine(Player.GetHealthPercentage, Player.IsActive, _selectedColor, _voice.Amplitude, IsTalking());
    }
}