@inherits Panel

@using Grubs
@using Grubs.UI.Components

@attribute [StyleSheet]

<root>
    <div class="rules-container">
        <div class="upper-bar">
            <div class="rules-title">Game Rules</div>
            <div class="tabs">
                <button class="@(SelectedTab == "rules" ? "selected" : "")" onclick=@(() => SetTab("rules"))>
                    <i>rule</i>
                    Gameplay
                </button>
                <button class="@(SelectedTab == "terrain" ? "selected" : "")" onclick=@(() => SetTab("terrain"))>
                    <i>landscape</i>
                    Terrain
                </button>
            </div>
        </div>
        <div class="scrollable">
            @if (SelectedTab == "rules")
            {
                <ControlInput class="control-wrap" Label="Grub Count: @(GrubsConfig.GrubCount)">
                    <Control>
                        <SliderControl Min=@(1) Max=@(10) Value:bind=@GrubsConfig.GrubCount style="cursor: none"/>
                    </Control>
                </ControlInput>
                <ControlInput class="control-wrap" Label="Turn Duration: @(GrubsConfig.TurnDuration)s">
                    <Control>
                        <SliderControl Min=@(10) Max=@(120) Value:bind=@GrubsConfig.TurnDuration/>
                    </Control>
                </ControlInput>
                <ControlInput class="control-wrap" Label="Weapon Crate Spawn Chance: @($"{GrubsConfig.WeaponCrateChancePerTurn * 100:F0}")%">
                    <Control>
                        <SliderControl Min=@(0) Max=@(1) Step=@(0.01f) Value:bind=@GrubsConfig.WeaponCrateChancePerTurn/>
                    </Control>
                </ControlInput>
                <ControlInput class="control-wrap" Label="Tool Crate Spawn Chance: @($"{GrubsConfig.ToolCrateChancePerTurn * 100:F0}")%">
                    <Control>
                        <SliderControl Min=@(0) Max=@(1) Step=@(0.01f) Value:bind=@GrubsConfig.ToolCrateChancePerTurn/>
                    </Control>
                </ControlInput>
                <ControlInput class="control-wrap" Label="Health Crate Spawn Chance: @($"{GrubsConfig.HealthCrateChancePerTurn * 100:F0}")%">
                    <Control>
                        <SliderControl Min=@(0) Max=@(1) Step=@(0.01f) Value:bind=@GrubsConfig.HealthCrateChancePerTurn/>
                    </Control>
                </ControlInput>
            }
            else if (SelectedTab == "terrain")
            {
                <div class="side">
                    <ControlInput class="control-wrap" Label="Terrain Type">
                        <Control>
                            <SingleSelectInput
                                EnumType="TerrainType"
                                SelectedIndex=@((int)GrubsConfig.WorldTerrainType)
                                ValueChanged=@TerrainTypeChanged/>
                        </Control>
                    </ControlInput>
                    @if (GrubsConfig.WorldTerrainType is GrubsConfig.TerrainType.Texture)
                    {
                        <ControlInput class="control-wrap" Label="Terrain Texture">
                            <Control>
                                <SingleSelectInput
                                    EnumType="TerrainTexture"
                                    SelectedIndex=@((int)GrubsConfig.WorldTerrainTexture)
                                    ValueChanged=@TerrainTextureChanged/>
                            </Control>
                        </ControlInput>
                    }
                </div>
                @if (GrubsConfig.WorldTerrainType is GrubsConfig.TerrainType.Generated)
                {
                    <ControlInput class="control-wrap" Label="Terrain Length: @($"{GrubsConfig.TerrainLength} units")">
                        <Control>
                            <SliderControl Min=@(1024) Max=@(4096) Step=@(64f) Value:bind=@GrubsConfig.TerrainLength/>
                        </Control>
                    </ControlInput>
                    <ControlInput class="control-wrap" Label="Terrain Height: @($"{GrubsConfig.TerrainHeight} units")">
                        <Control>
                            <SliderControl Min=@(512) Max=@(2048) Step=@(64f) Value:bind=@GrubsConfig.TerrainHeight/>
                        </Control>
                    </ControlInput>
                    <ControlInput class="control-wrap" Label="Terrain Amplitude: @($"{GrubsConfig.TerrainAmplitude}f")">
                        <Control>
                            <SliderControl Min=@(16) Max=@(128) Step=@(1f) Value:bind=@GrubsConfig.TerrainAmplitude/>
                        </Control>
                    </ControlInput>
                    <ControlInput class="control-wrap" Label="Terrain Frequency: @($"{GrubsConfig.TerrainFrequency}f")">
                        <Control>
                            <SliderControl Min=@(0.1f) Max=@(1) Step=@(0.01f) Value:bind=@GrubsConfig.TerrainFrequency/>
                        </Control>
                    </ControlInput>
                    <ControlInput class="control-wrap" Label="Terrain Noise Zoom: @($"{GrubsConfig.TerrainNoiseZoom}f")">
                        <Control>
                            <SliderControl Min=@(1) Max=@(5) Step=@(0.1f) Value:bind=@GrubsConfig.TerrainNoiseZoom/>
                        </Control>
                    </ControlInput>
                }
            }
        </div>
    </div>
</root>

@code
{
    private string SelectedTab { get; set; } = "rules";

    private void SetTab(string tab)
    {
        SelectedTab = tab;
    }

    private void TerrainTypeChanged(int value)
    {
        GrubsConfig.WorldTerrainType = (GrubsConfig.TerrainType)value;
    }

    private void TerrainTextureChanged(int value)
    {
        GrubsConfig.WorldTerrainTexture = (GrubsConfig.TerrainTexture)value;
    }

    protected override int BuildHash()
    {
        var crateOdds = GrubsConfig.WeaponCrateChancePerTurn + GrubsConfig.ToolCrateChancePerTurn + GrubsConfig.HealthCrateChancePerTurn;
        var terrainGen = GrubsConfig.TerrainLength + GrubsConfig.TerrainHeight + GrubsConfig.TerrainAmplitude + GrubsConfig.TerrainFrequency + GrubsConfig.TerrainNoiseZoom;
        var terrainOpts = (int)GrubsConfig.WorldTerrainType + (int)GrubsConfig.WorldTerrainTexture;
        return HashCode.Combine(GrubsConfig.GrubCount, GrubsConfig.TurnDuration, crateOdds, terrainGen, terrainOpts);
    }
}