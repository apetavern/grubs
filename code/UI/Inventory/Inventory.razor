@namespace Grubs.UI

@if (Game.LocalPawn is not Grubs.Player player)
{
    return;
}

<root class="@( _isOpen ? "open" : "" )">
    <label class="name" text=@_hoveredWeapon?.Name />
    <div class="items">
        @{
            var sortedWeapons = player.Inventory.Weapons.OrderByDescending(w => w.WeaponType == WeaponType.Weapon);
            @foreach (var weapon in sortedWeapons)
            {
                var hasAmmo = weapon.HasAmmo();
                <InventorySlot
                Weapon=@weapon
                HasAmmo=@hasAmmo
                @onmouseover=@( () => _hoveredWeapon = weapon )
                @onmouseout=@( () => _hoveredWeapon = null )
                @onclick=@( () => { if ( hasAmmo ) player.ActiveWeaponInput = weapon; } ) />
            }
        }
    </div>
</root>

@code {
    private bool _isOpen;
    private Weapon _hoveredWeapon;
    private bool RequestOpen() => Game.LocalPawn is Grubs.Player player && player.IsTurn && Input.Down(InputAction.Inventory);
    private readonly int _totalAmmo = (Game.LocalPawn as Grubs.Player).Inventory.Weapons.Sum(x => x.Ammo);

    public override void Tick()
    {
        _isOpen = RequestOpen();
        Cursor.Enabled("Inventory", _isOpen);
    }

    protected override int BuildHash()
    {
        return HashCode.Combine(_isOpen, _hoveredWeapon?.GetHashCode(), _totalAmmo.GetHashCode());
    }
}

<style>
    Inventory {
        position: absolute;
        bottom: 225px;
        width: 375px;
        transition: all 150ms ease-out;
        opacity: 0;
        right: -200px;
        flex-direction: column;
        pointer-events: none;

        &.open {
            right: 100px;
            opacity: 1;
            sound-in: ui_inventory_open;
            pointer-events: all;
        }

        .name {
            font-family: Londrina Solid;
            font-size: 40px;
            color: white;
            text-shadow: 2px 2px 0px black;
        }

        .items {
            flex-wrap: wrap;
            gap: 10px;
        }
    }
</style>