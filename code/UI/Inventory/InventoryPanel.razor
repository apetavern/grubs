@using Sandbox;

@namespace Grubs

@if (Game.LocalPawn is not Player player)
{
    return;
}

<root class="@( RequestOpen() ? "open" : "" )">
    <label class="name" text=@_hoveredWeapon?.Name />
    <div class="items">
        @foreach (var weapon in player.Inventory.Weapons)
        {
            var hasAmmo = weapon.HasAmmo();
            <InventoryItem
            Weapon=@weapon
            HasAmmo=@hasAmmo
            @onmouseover=@( () => _hoveredWeapon = weapon )
            @onmouseout=@( () => _hoveredWeapon = null )
            @onclick=@( () => { if ( hasAmmo ) PlaySound("ui_button_click"); player.ActiveWeaponInput = weapon; } ) />
        }
    </div>
</root>

@code {
    private Weapon _hoveredWeapon;
    private bool RequestOpen() => Game.LocalPawn is Player player && player.IsTurn && Input.Down(InputAction.Inventory);
    private readonly int _totalAmmo = (Game.LocalPawn as Player).Inventory.Weapons.Sum(x => x.Ammo);

    protected override int BuildHash()
    {
        return HashCode.Combine(RequestOpen(), _hoveredWeapon?.GetHashCode(), _totalAmmo.GetHashCode());
    }
}

<style>
    InventoryPanel {
        position: absolute;
        bottom: 125px;
        width: 320px;
        transition: all 150ms ease-out;
        opacity: 0;
        right: -200px;
        flex-direction: column;

        &.open {
            pointer-events: all;
            right: 100px;
            opacity: 1;
            sound-in: ui_inventory_open;
        }

        .name {
            font-family: Londrina Solid;
            font-size: 40px;
            color: white;
            text-shadow: 2px 2px 0px black;
        }

        .items {
            flex-wrap: wrap;
            gap: 10px;
        }
    }
</style>