@namespace Grubs.UI

@if (Game.LocalPawn is not Player player)
{
    return;
}

<root>
    <div class="container">
        <div class="section">
            <label class="title">Colors</label>
            <div style="flex-wrap: wrap;">
                @foreach (var pair in GrubsGame.Instance.PlayerColors)
                {
                    var color = pair.Key;
                    var isTaken = pair.Value && player.Color != color;

                    <button
                    class="color @(player.Color == color ? "selected" : "") @(isTaken ? "disabled" : "") "
                    style="background-color: @color.Hex;" 
                    @onclick=@(() => 
                    { 
                        if(!isTaken)
                            Player.SelectColor(color.RawInt); 
                    })/>
                }
            </div>
        </div>
        <div class="section">
            <label class="title">Names</label>
            <div style="flex-wrap: wrap;">
                @for (int i = 0; i < player.SelectedGrubNames.Count; ++i)
                {
                    var index = i;
                    <div style="width: 50%; flex-direction: column; font-size: 30px; margin-bottom: 5px;">
                        <label>@($"Grub #{i + 1}")</label>
                        <TextEntry 
                        text=@player.SelectedGrubNames[i] 
                        MaxLength=@(10) 
                        CharacterRegex="^[a-zA-Z0-9 ]+$"
                        OnTextEdited=@((string text) => { player.SelectedGrubNames[index] = text; player.SerializeGrubNames(); })/>
                    </div>
                }
            </div>
        </div>
        <div class="section">
            <label class="title">Clothing</label>
            <div style="flex-wrap: wrap;">
                @for (int i = 0; i < Player.CosmeticPresets.Count; ++i)
                {
                    var index = i;
                    var isSelected = player.SelectedCosmeticIndex == i;
                    <button class="cosmetic @(isSelected ? "selected" : "")" @onclick=@(() => { player.SelectedCosmeticIndex = isSelected ? -1 : index; })>
                    <img src=@Player.CosmeticPresets[i].MenuIcon />
                    </button>
                }
            </div>
        </div>
    </div>
</root>

@code {
    protected override int BuildHash()
    {
        var player = Game.LocalPawn as Player;
        return HashCode.Combine(
            player?.Color.GetHashCode(), 
            player?.SelectedCosmeticIndex,
            player?.SelectedGrubNames?.HashCombine(n => n.GetHashCode()), 
            GrubsGame.Instance?.PlayerColors?.HashCombine(p => HashCode.Combine(p.Value))
        );
    }
}

<style>
    CustomizeMenu {
        top: 40px;
        left: 64px;
        width: 25%;

        .container {
            height: 700px;
            padding: 10px;
            width: 100%;
            overflow: scroll;

            .section {
                flex-direction: column;
                margin-bottom: 10px;
                flex-shrink: 0;

                .title {
                    font-size: 50px;
                }

                .color {
                    aspect-ratio: 1;
                    height: 50px;
                    width: 10%;
                    margin: 5px;
                    border-width: 4px;
                    border-color: transparent;

                    &.selected {
                        transform: scale(1.2);
                    }

                    &:hover {
                        &:not(.disabled):not(.selected) {
                            transform: scale(1.1);
                        }
                    }

                    &.disabled {
                        opacity: 0.1;
                    }
                }

                .cosmetic {
                    aspect-ratio: 1;
                    width: 20%;
                    height: 5px;
                    margin: 5px;
                    background-color: rgba(235, 235, 235, 0.24);

                    img {
                        background-repeat: no-repeat;
                        background-size: contain;
                        height: 100%;
                        width: 100%;
                    }

                    &.selected {
                        transform: scale(1.1);
                        border-bottom: 2px solid white;
                    }
                }
            }
        }

        textentry {
            transition: opacity 0.1s ease;
            border-radius: 4px;
            background-color: rgb(207, 207, 207, 0.2);
            margin: 5px;

            label {
                padding: 0px 5px;
            }
        }
    }
</style>