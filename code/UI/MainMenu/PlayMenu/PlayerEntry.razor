@using Sandbox.UI;
@using Grubs;
@namespace Grubs.UI
@inherits Panel
@attribute [StyleSheet]

<root>
    <div style="align-items: center;">
        <div class="color-strip" style="background-color: @Player.Color.Hex"></div>
        <img src="avatar:@Player.Client.SteamId" class="avatar" />
        <label class="name">@Player.Client.Name</label>
        <button icon="stars" class="host-badge @(!Player.Client.IsListenServerHost ? "hidden" : "")"></button>
    </div>

    @if (!Player.Client.IsBot)
    {
        <section class="stats">
            <label>@_currentStat</label>
            <button icon="@_currentStat.Icon" style="padding-left: 2px" />
        </section>
    }
</root>

@code {
    public Player Player { get; set; }

    private StatInfo[] _stats = {
        new StatInfo(null, "hrs", "timer", "0.0"),
        new StatInfo("ffa-games-won", "wins", "emoji_events"),
        new StatInfo("grubs-killed", "kills", "person_off")
    };
    private StatInfo _currentStat => _stats[_statIndex];
    private static int _statIndex;
    private static int _statsLength;

    public static void NextStat() => _statIndex = (_statIndex + 1) % _statsLength;

    protected override int BuildHash()
    {
        return HashCode.Combine(_statIndex, Player.PlayTime);
    }

    protected override void OnAfterTreeRender(bool firstTime)
    {
        if (!firstTime) return;

        _statsLength = _stats.Length;
        foreach (var stat in _stats)
            stat.Populate(Player);
    }

    private class StatInfo
    {
        public string Icon;

        private string _ident; 
        private string _suffix;
        private string _format;
        private double _val;

        private Player _player;
        private static Sandbox.Services.Stats.PlayerStats _statCache;

        public StatInfo(string ident, string suffix, string icon, string format = "0")
        {
            Icon = icon;
            _ident = ident;
            _suffix = suffix;
            _format = format;
        }

        public void Populate(Player player)
        {
            _player = player;
            if(_statCache == null)
                _statCache = player.Client.GetPlayerStats();

            _val = _statCache.Where(s => s.Name == _ident).FirstOrDefault().Value;
        }

        public override string ToString()
        {
            // Continuously fetch PlayTime (it changes, and isn't even networked by the time we call Populate()).
            if(_ident == null && _player.IsValid())
                _val = _player.PlayTime;

            return $"{_val.ToString(_format)} {_suffix}";
        }
    }
}