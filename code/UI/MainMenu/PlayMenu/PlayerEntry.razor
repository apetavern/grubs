@using Sandbox.UI;
@using Grubs;
@namespace Grubs.UI
@inherits Panel
@attribute [StyleSheet]

<root>
    <div style="align-items: center;">
        <div class="color-strip" style="background-color: @Player.Color.Hex"></div>
        <img src="avatar:@Player.Client.SteamId" class="avatar" />
        <label class="name">@Player.Client.Name</label>
        <div class="host-badge icon @(!Player.Client.IsListenServerHost ? "hidden" : "")">stars</div>
    </div>

    @if (!Player.Client.IsBot)
    {
        <section class="stats">
            <label style="padding-right: 5px;">@_currentStat.Format(_currentValue)</label>
            <div class="icon">@_currentStat.Icon</div>
        </section>
    }
</root>

@code {
    public Player Player { get; set; }

    private static readonly StatInfo[] _stats =
    {
        new(null, "hrs", "timer", "0.0"),
        new("ffa-games-won", "wins", "emoji_events"),
        new("grubs-killed", "kills", "person_off")
    };
    private static int _statIndex;
    private StatInfo _currentStat => _stats[_statIndex];
    private double _currentValue;

    public static void ShowNextStat()
    {
        _statIndex = _statIndex == _stats.Length - 1 ? 0 : _statIndex + 1;
    }

    protected override int BuildHash()
    {
        return HashCode.Combine(_statIndex, _currentValue);
    }

    protected override void OnAfterTreeRender(bool firstTime)
    {
        if (!Player.Client.IsValid() || Player.Client.IsBot)
            return;

        // PlayTime is a package stat, not a leaderboard stat.
        _currentValue = _currentStat.Ident == null ? Player.PlayTime : Player.Client.GetPlayerStats().FirstOrDefault(s => s.Name == _currentStat.Ident).Value;
    }

    private class StatInfo
    {
        public readonly string Ident;
        public readonly string Icon;

        private readonly string _suffix;
        private readonly string _format;

        private Player _player;

        public StatInfo(string ident, string suffix, string icon, string format = "0")
        {
            Ident = ident;
            Icon = icon;
            _suffix = suffix;
            _format = format;
        }

        public string Format(double val) => $"{val.ToString(_format)} {_suffix}";
    }
}
