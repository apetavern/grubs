@namespace Grubs.UI
@inherits Sandbox.UI.WorldPanel
@attribute [StyleSheet]

@if (Game.LocalPawn is not Player player || !IsTurn() || _hasMoved)
{
    return;
}

<root style="color: @player.Color.Hex;">
    <label>arrow_drop_down</label>
</root>

@code {
    private const float _afkTime = 10f;
    private bool _hasMoved = false;
    private RealTimeUntil _timeUntilTurnSkip = _afkTime;
    private List<string> _activeInputs = new List<string>()
    {
        InputAction.CameraPan,
        InputAction.Inventory,
        InputAction.Chat,
        InputAction.MoveLeft,
        InputAction.MoveRight,
        InputAction.Jump,
        InputAction.Backflip
    };

    public TurnBobber()
    {
        SceneObject.RenderLayer = SceneRenderLayer.OverlayWithoutDepth;
    }

    public override void Tick()
    {
        if (Game.LocalPawn is not Player player)
            return;

        if (!IsTurn())
        {
            _hasMoved = false;
            _timeUntilTurnSkip = _afkTime;
            return;
        }

        if (!_hasMoved && (_activeInputs.Any((input) => Input.Pressed(input)) || Input.MouseWheel != 0))
            _hasMoved = true;

        Position = player.ActiveGrub.Position + Vector3.Up * 90;
        Rotation = Rotation.LookAt(Vector3.Right);

        if (!_hasMoved && _timeUntilTurnSkip)
            SkipTurn();
    }

    private bool IsTurn()
    {
        return Game.LocalPawn is Player player && player.IsTurn && player.ActiveGrub.IsValid();
    }

    protected override int BuildHash()
    {
        return HashCode.Combine(IsTurn(), _hasMoved);
    }

    [ConCmd.Server]
    private static void SkipTurn()
    {
        if ( ConsoleSystem.Caller.Pawn is not Player player)
            return;

        if ( player.IsTurn && !GamemodeSystem.Instance.UsedTurn )
        {
            GamemodeSystem.Instance.UseTurn( false );
            UI.TextChat.AddInfoChatEntry($"{player.SteamName} was too busy playing with their other grub...");
        }
    }
}
