@namespace Grubs.UI

@using Grubs.Helpers
@using Grubs.Gamemodes
@using Grubs.Pawn

@inherits TargetedWorldPanel

@attribute [StyleSheet]

@if (!IsTurn() || _hasMoved)
{
	return;
}

<root style="color: @Player.SelectedColor;">
	<i>arrow_drop_down</i>
</root>

@code {
	private Player Player
	{
		get
		{
			if (_player is null)
				_player = Player.All.FirstOrDefault(p => !p.IsProxy);

			return _player;
		}
	}

	private Player _player;
	private const float _afkTime = 10f;
	private bool _hasMoved = false;
	private RealTimeUntil _timeUntilSkip = _afkTime;
	private List<string> _actions = new List<string>()
	{
		"jump",
		"backflip",
		"camera_pan",
		"camera_reset",
		"toggle_inventory",
		"chat",
		"voice",
		"fire"
	};

	protected override void OnUpdate()
	{
		if (!IsTurn())
		{
			_hasMoved = false;
			_timeUntilSkip = _afkTime;
			return;
		}

		Target = Player?.ActiveGrub?.GameObject;
		if (Target is null)
			return;

		base.OnUpdate();

		if (!_hasMoved && _actions.Any((input) => Input.Pressed(input)) || Input.MouseWheel != Vector2.Zero || Input.AnalogMove != Vector3.Zero)
			_hasMoved = true;

		if (!_hasMoved && _timeUntilSkip)
			SkipTurn();
	}

	private bool IsTurn() => Gamemode.Current.State == GameState.Playing && !Gamemode.FFA.TurnIsChanging && (Player?.IsActive ?? false) && (!Player.ActiveGrub?.IsDead ?? false);

	private void SkipTurn()
	{
		if (!Player.IsActive || Gamemode.FFA.TurnIsChanging)
			return;

		_timeUntilSkip = _afkTime;
		ChatHelper.Instance.SendInfoMessage($"{Player.ActiveGrub.Name} was AFK playing with their other Grub...");
		Gamemode.FFA.UseTurn();
	}

	protected override int BuildHash()
	{
		return HashCode.Combine(IsTurn(), _hasMoved);
	}
}