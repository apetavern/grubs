@namespace Grubs.UI

@using Grubs.Pawn
@using Grubs.Systems.Pawn.Grubs
@using Sandbox;
@using Sandbox.UI;
@using Sandbox.Utility

@inherits PanelComponent

<root style="transform: scale( @ScaleFactor )">
    <div class="title" style="color: linear-gradient(@Color.Hex, adjust-hue(@Color.Hex, 45));">
        @Grub.Name
    </div>
    <div class="health-container" style="background-color: darken(@Color.Hex, 60%)">
        <div class="health-bar" style="width: @(Grub.Health.CurrentHealth / 150f * 100f)%;
        background-image: linear-gradient(@Color.Hex, darken(@Color.Hex, 20%))">

            <div class="health-bar-overflow" style="width: @((Grub.Health.CurrentHealth - 150f) / 150f * 100f)%;
            background-image: linear-gradient(to right, @Color.Hex, adjust-hue(@Color.Hex, 45))" />
        </div>
        <div class="health-bar-text">@Grub.Health.CurrentHealth.Clamp(0, float.MaxValue).CeilToInt()</div>
    </div>
    @*<div class="avi">
    <image
    src="avatar:@(Grub.Network.Owner?.SteamId ?? Steam.SteamId)"
    style="background-color: @Color.Hex; border-color: @Color.Hex"/>
    </div>
    <div class="top">
    <div class="hp" style="background-color: @Color.Hex">
    <label>
    @_health.CeilToInt()
    </label>
    <i>favorite</i>
    </div>
    </div>
    <div
    class="title"
    style="background-image: linear-gradient(@Color.Hex, adjust-hue(@Color.Hex, 45));
    border-bottom-color: darken(adjust-hue(@Color.Hex, 45), 50%)">
    @Grub.Name
    </div>*@
</root>

@code
{
    [Property] public required Grub Grub { get; set; }

    private float ScaleFactor { get; set; }
    private Color Color
    {
        get
        {
            return _color;
            // if (_color == Color.White && Color.TryParse(Grub?.Owner?.SelectedColor, out var color))
            //     _color = color;
            //
            // return _color;
        }
    }
    private Color _color = Color.White;

    protected override void OnStart()
    {
        base.OnStart();

        WorldPosition = Grub.WorldPosition + Vector3.Up * 44f;
    }

    protected override void OnUpdate()
    {
        base.OnUpdate();

        ScaleFactor = ScaleFactor.LerpTo(GrubFollowCamera.Local.Distance / 600, Time.Delta * 4f).Clamp(1, 3);
        WorldPosition = Grub.WorldPosition + Vector3.Up * 52f + Vector3.Right * 35;
    }

    protected override int BuildHash()
    {
        return HashCode.Combine(ScaleFactor, Grub.Name, Grub.Health.CurrentHealth, Color);
    }
}