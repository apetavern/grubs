@namespace Grubs.UI.World

@using Grubs.Pawn
@using Grubs.Systems.GameMode
@using Grubs.Systems.Pawn
@using Grubs.Systems.Pawn.Grubs
@inherits PanelComponent

@if (!Grub.IsValid())
{
    return;
}

<root>
    @if (Grub.IsActive())
    {
        <div class="vitals-parent">
            <div class="vitals-shape bg-@ColorString-med"/>
        </div>
        <label class="grub-name text-@ColorString-light text-stroke-@ColorString-med">@Grub.Name</label>
        <div class="grub-health-bar bg-@ColorString-dark">
            <div class="grub-health-bar-inner bg-@ColorString-light" style="width: @(Grub.HealthPercentage * 100)%"/>
        </div>
        <label class="grub-health-percentage text-@ColorString-light text-stroke-@ColorString-med">@GetHealthPercentageString()</label>
    }
    else
    {
        <div class="minimal-vitals">
            <label class="text-@ColorString-light text-stroke-@ColorString-med">@Grub.Name</label>
            <div class="min-grub-health-bar bg-@ColorString-dark">
                <div class="min-grub-health-bar-inner bg-@ColorString-light" style="width: @(Grub.HealthPercentage * 100)%"/>
            </div>
        </div>
    }
</root>

@code
{
    [Property] private Grub Grub { get; set; }

    private PlayerColor PlayerColor => Grub.Owner?.PlayerColor ?? PlayerColor.Sage;
    private string ColorString => PlayerColor.ToString();

    private float Scale { get; set; } = 1f;

    private string GetHealthPercentageString()
    {
        if (!Grub.IsValid()) 
            return "0";
        return $"{(Grub.HealthPercentage * 100).Clamp(0, Grub.Health.MaxHealth).CeilToInt()}%";
    }

    protected override void OnStart()
    {
        WorldRotation = Scene.Camera.WorldRotation;
    }

    protected override void OnUpdate()
    {
        if ( !GrubFollowCamera.Local.IsValid() )
            return;

        WorldPosition = Grub.PlayerController.Head.WorldPosition + Vector3.Up * 24f;
        if (BaseGameMode.Current.IsValid() && BaseGameMode.Current.IsGrubActive(Grub))
        {
            WorldPosition = WorldPosition.WithY( 505f );
        }
        Scale = Scale.LerpTo(GrubFollowCamera.Local.Distance / 600, Time.Delta * 4f).Clamp( 1f, 4f );
        WorldScale = Scale;
    }

    protected override int BuildHash()
    {
        return HashCode.Combine(Grub, Grub?.IsActive(), Grub?.Owner?.PlayerColor, GetHealthPercentageString());
    }
}
